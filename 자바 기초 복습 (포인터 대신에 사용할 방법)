객체 Vs 자바 기본타입의 차이라 볼 수있다.
즉, 자바는 기본적으로 Call By Value로 값을 넘기고 받는다.
이때, int float와 같은 자바 기본 타입 (로컬 변수)는 스택에 저장되며
모든 객체 즉, List, class 객체와 같은 것들으 Heap영역에 저장되어  저장된 주소의 값을 Call By Value로 넘기게 된다.
따라서 아래의 예제는 List 객체를 이용하여 넘긴 것으로 먼저 결과만 정리하면 
1,2,1,2
1,2,1,2가 나온다.
void task1(List<Integer> list) {
    list.add(1);
    list.add(2);
}

void task2(List<Integer> list) {
    list = new ArrayList<Integer>();
    list.add(1);
}

main() {
    List<Integer> list = new ArrayList<>();
    list.add(1);
    list.add(2);

    task1(list);
    print(list);

    task2(list);
    print(list);
}

Why?
task1은 메인에서 넘긴 list 객체 주소로 받아, 그 객체에 add를 수행한 것이므로 1,2,1,2가 맞다.
그럼 task2에서 add(1)을 수행하였는데 왜1,2,1,2일까?
그 이유는 new 연산자에 있다. new연산을 하게 될 경우, Heap 영역에서 새로운 List 객체를 선언하였기에 main에서 선언한 list 객체가 아닌
다른 새로운 list 객체를 가리키게 된다.(엄밀히 포인터가 아니므로 가리킨다는 뜻 보단 새로운 주소의 값을 받는다.) 그렇기에 main에서는 task2(list)를
수행하더라도 main의 list객체에는 값이 변하지 않는다. 즉, task1을 수행하여나온 결과가 두 번 출력 된다고 볼 수 있을 것이다.
